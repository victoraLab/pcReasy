'height:' + (rect.height - 4) + 'px;' +
'z-index:1000;' +
'text-align:center';
document.body.appendChild(input);
};
input.value = th.querySelector(
isColHeader ? '.colHeader' : '.rowHeader'
).innerText;
appendInput();
setTimeout(() => {
input.select();
addListeners('change blur', instance[
isColHeader ? 'getColHeader' : 'getRowHeader'
](), coords[isColHeader ? 'col' : 'row']);
});
}
}"))
})
# MANUAL CLOSE
observeEvent(input$save_and_close, {
stopApp({
dm <- read.csv(temp_file,
header = TRUE,
stringsAsFactors = FALSE)})
unlink(temp_file)
return(dm)
})
},
# CREATE TEMP FILE
onStart <- function(){
temp_file <<- tempfile(fileext = ".csv")
}
)
# RUN SHINY APP
x <- runApp(app, launch.browser = paneViewer())
# RETURN UPDATED DATA MATRIX
return(x)
}
table_editor(pcr)
pcr
finalConc <- data.frame(
dNTP = 200,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
pcalc(v = 10, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 0.5,
RPrimer = 0.5,
DNA = 10,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 10,
RPrimer = 10,
DNA = 346,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
initialConc
pcalc(v = 10, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 10, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
pcalc(v = 10, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 100,
RPrimer = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 10, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 100,
RPrimer = 100,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 100,
RPrimer = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 10, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
v = 25; rxn = NULL; initialConc = NULL; finalConc = NULL; pError = 0
if(length(initialConc) == 0){
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 0.5,
RPrimer = 0.5,
DNA = 10,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 10,
RPrimer = 10,
DNA = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
rxn = 10
}
res <- list()
initialConc <- initialConc[,!initialConc == 0]
finalConc   <- finalConc  [,!finalConc   == 0]
for(i in 1:ncol(initialConc)){
z <- initialConc[[i]]/finalConc[[i]]
res[[i]] <- model.frame(y ~ I(x / z), data = data.frame(x = v, y = initialConc[[i]]))
}
res <- bind_rows(res)
res <- data.frame(initialConc = as.vector(t(initialConc)),
finalConc = as.vector(t(finalConc)),
rxnVols = res[["I(x/z)"]],
row.names = colnames(initialConc))
parc <- sum(res[["rxnVols"]])
water <- v - parc
water + parc
water
v = 10
if(length(initialConc) == 0){
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 100,
RPrimer = 100,
DNA = 10,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 100,
RPrimer = 100,
DNA = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
rxn = 10
}
res <- list()
initialConc <- initialConc[,!initialConc == 0]
finalConc   <- finalConc  [,!finalConc   == 0]
for(i in 1:ncol(initialConc)){
z <- initialConc[[i]]/finalConc[[i]]
res[[i]] <- model.frame(y ~ I(x / z), data = data.frame(x = v, y = initialConc[[i]]))
}
res <- bind_rows(res)
res <- data.frame(initialConc = as.vector(t(initialConc)),
finalConc = as.vector(t(finalConc)),
rxnVols = res[["I(x/z)"]],
row.names = colnames(initialConc))
parc <- sum(res[["rxnVols"]])
water <- v - parc
if(water + parc > v){
stop(
paste(
sprintf("Total volume cannot be bigger than %s", v),
sprintf("Volume is at %s", water + parc),
sep = "\n"))
}
water
sum(res[["rxnVols"]])
res
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 100,
RPrimer = 100,
DNA = 10,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 100,
RPrimer = 100,
DNA = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
v
res <- list()
initialConc <- initialConc[,!initialConc == 0]
finalConc   <- finalConc  [,!finalConc   == 0]
for(i in 1:ncol(initialConc)){
z <- initialConc[[i]]/finalConc[[i]]
res[[i]] <- model.frame(y ~ I(x / z), data = data.frame(x = v, y = initialConc[[i]]))
}
res <- bind_rows(res)
res <- data.frame(initialConc = as.vector(t(initialConc)),
finalConc = as.vector(t(finalConc)),
rxnVols = res[["I(x/z)"]],
row.names = colnames(initialConc))
parc <- sum(res[["rxnVols"]])
water <- v - parc
parc
v
parc
water
water
parc
water
water
if(water < 0){
stop(
paste(
sprintf("Total volume cannot be bigger than %s", v),
sprintf("Volume is at %s", water + parc),
sep = "\n"))
}
document()
load_all()
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 100,
RPrimer = 100,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 100,
RPrimer = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
water
parc
water + parc
sum(res[["rxnVols"]])
v
parc
res
sum(res[["rxnVols"]])
v
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 100,
RPrimer = 100,
DNA = 10,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 100,
RPrimer = 100,
DNA = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 1000,
RPrimer = 1000,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 100,
RPrimer = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
document()
load_all()
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 100,
RPrimer = 100,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
DNA = 10,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
DNA = 349,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
DNA = 20,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
DNA = 349,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
DNA = 350,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
DNA = 10,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
DNA = 350,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
DNA = 15,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
DNA = 350,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
DNA = 15,
FPrimer = 0.5,
RPrimer = 0.5,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
initialConc <- data.frame(
buffer = 5,
dNTP = 10000,
DNA = 100,
FPrimer = 10,
RPrimer = 10,
Q5Poly = 2,
optional = 0,
row.names = "Q5"
)
pcalc(v = 25, rxn = 32, initialConc = initialConc, finalConc = finalConc, pError = 0.1)
document()
build(".")
document()
build(".")
finalConc <- data.frame(
buffer = 1,
dNTP = 200,
FPrimer = 10,
RPrimer = 10,
DNA = 10,
Q5Poly = 0.02,
optional = 0,
row.names = "Q5"
)
build(".")
